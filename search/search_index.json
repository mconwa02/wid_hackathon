{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    about.md  # navigation headers\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"about/","title":"About","text":"301 Moved Permanently 301 Moved Permanently nginx/1.14.2"},{"location":"geopandas/","title":"Geopandas using Python for Data Scientists","text":"<p>Geopandas is a powerful Python library for working with geospatial data, allowing data scientists to manipulate, analyze, and visualize geographic information. In this comprehensive training program, you will learn the fundamentals of Geopandas and how to perform various geospatial data analysis tasks.</p> <p>1. Installing Geopandas: Before we start, make sure you have Geopandas installed. Geopandas relies on other geospatial libraries, such as Fiona, Shapely, and PyProj. You can install Geopandas along with these dependencies using conda or pip:</p> <pre><code>pip install geopandas\n</code></pre> <p>2. Importing Geospatial Data:* Let's start by importing a shapefile containing geospatial data. We'll use a shapefile that contains the boundaries of countries:</p> <pre><code>import geopandas as gpd\n# Load the shapefile\nworld_map = gpd.read_file('world_map.shp')\n# Display the first few rows of the data\nprint(world_map.head())\n</code></pre> <p>3. Basic Geospatial Operations: Geopandas allows you to perform various geospatial operations, such as plotting the data, calculating areas, and filtering based on spatial attributes:</p> <pre><code># Plot the world map\nworld_map.plot()\nplt.title('World Map')\nplt.show()\n# Calculate the area of each country\nworld_map['area_sqkm'] = world_map.geometry.area\n# Filter countries with an area greater than 2 million square kilometers\nlarge_countries = world_map[world_map['area_sqkm'] &gt; 2_000_000]\nprint(large_countries)\n</code></pre> <p>4. Spatial Joins: Spatial joins allow you to combine geospatial data based on their spatial relationships. Let's perform a spatial join to associate points with the corresponding countries:</p> <pre><code># Load a points shape\nfilepoints = gpd.read_file('points.shp')\n# Perform a spatial join to get the points associated with the countries\npoints_with_countries = gpd.sjoin(points, world_map, how='left', op='within')\n# Display the first few rows of the result\nprint(points_with_countries.head())\n</code></pre> <p>Challenging Exercises:</p> <ol> <li>Load a shapefile containing the boundaries of states or provinces and perform a spatial join with a dataset of cities to determine which city belongs to which state/province.</li> <li>Visualize the distribution of a specific attribute (e.g., population, GDP) in the world map using a choropleth map.</li> <li>Load a shapefile containing the boundaries of administrative regions (e.g., counties or municipalities) and create a plot showing the density of a specific attribute (e.g., population density) using a kernel density estimation (KDE) plot.</li> <li>Use Geopandas to calculate the distance between two points given their latitude and longitude coordinates.</li> <li>Load any other geospatial dataset of your choice (e.g., environmental data, transportation networks) and perform exploratory analysis to identify interesting patterns or relationships.</li> <li>As you progress, explore more advanced geospatial analysis techniques, such as spatial overlays, raster data processing, and geospatial visualization using interactive maps with Folium. Geopandas offers a wide range of capabilities for geospatial data analysis, making it a valuable tool for data scientists working with geographic information. Happy geospatial data exploration!</li> </ol>"},{"location":"kaggle_data/","title":"Kaggle Data","text":""},{"location":"kaggle_data/#women-health-care","title":"Women Health Care","text":"<p>Kaggle Women Health Care</p>"},{"location":"kaggle_data/#fetal-health-classification","title":"Fetal Health Classification","text":"<p>Classify the health of a fetus as Normal, Suspect or Pathological using CTG data</p> <p>About Dataset Abstract Classify fetal health in order to prevent child and maternal mortality.</p>"},{"location":"kaggle_data/#about-this-dataset","title":"About this dataset","text":"<p>Context Reduction of child mortality is reflected in several of the United Nations' Sustainable Development Goals and is a key indicator of human progress. The UN expects that by 2030, countries end preventable deaths of newborns and children under 5 years of age, with all countries aiming to reduce under\u20115 mortality to at least as low as 25 per 1,000 live births.</p> <p>Parallel to notion of child mortality is of course maternal mortality, which accounts for 295 000 deaths during and following pregnancy and childbirth (as of 2017). The vast majority of these deaths (94%) occurred in low-resource settings, and most could have been prevented.</p> <p>In light of what was mentioned above, Cardiotocograms (CTGs) are a simple and cost accessible option to assess fetal health, allowing healthcare professionals to take action in order to prevent child and maternal mortality. The equipment itself works by sending ultrasound pulses and reading its response, thus shedding light on fetal heart rate (FHR), fetal movements, uterine contractions and more.</p>"},{"location":"kaggle_data/#data","title":"Data","text":"<p>This dataset contains 2126 records of features extracted from Cardiotocogram exams, which were then classified by three expert obstetritians into 3 classes:</p> <ul> <li>Normal</li> <li>Suspect</li> <li>Pathological</li> </ul>"},{"location":"kaggle_data/#how-to-use","title":"How to use","text":"<p>Create a multiclass model to classify CTG features into the three fetal health states.</p>"},{"location":"kaggle_data/#well-being-of-women-in-52-countries","title":"Well-being of Women in 52 Countries","text":"<p>Kaggle Well-being of Women in 52 Countries</p> <p>LivWell is a global longitudinal database which provides a range of key indicators related to women\u2019s socioeconomic status, health and well-being, access to basic services, and demographic outcomes. Data are available at the sub-national level for 52 countries and 447 regions. A total of 134 indicators are based on 199 Demographic and Health Surveys for the period 1990-2019, supplemented by extensive information on socioeconomic and climatic conditions in the respective regions for a total of 190 indicators. The resulting data offer various opportunities for policy-relevant research on gender inequality, inclusive development, and demographic trends at the sub-national level.</p>"}]}